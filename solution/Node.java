package solution;

import java.util.List;
import java.util.ArrayList;

/**
 * This class represents one Node in the graph generated by search algorithm.
 */
public class Node {
    // Node configuration
    private ArmConfig configuration = null;
    // Node children
    private List<Node> children = new ArrayList<Node>();

    public Node(ArmConfig configuration) {
        // Assign configuration from constructor
        this.configuration = configuration;
    }

    /**
     * Add child to the Node
     * @param child - [Node] child to add
     */
    public void addChild(Node child) { children.add(child); }

    /**
     * Retrieve child from the list of Node children by index
     * @param index - [int] index of the child to retrieve
     * @return - [Node] child with given index if exists
     */
    public Node getChild(int index) { return children.get(index); }

    /**
     * Retrieve list of children
     * @return - [List<Node>] - list of children nodes
     */
    public List<Node> getChildren() { return children; }

    /**
     * Remove child from the list of children by its index
     * @param index - [int] index of the child to remove
     */
    public void removeChild(int index) { children.remove(index); }

    /**
     * Check if children array is empty
     * @return - [boolean] true if Node has children and false otherwise
     */
    public boolean hasChildren() { return !children.isEmpty(); }

    /**
     * Return the size of children array
     * @return - [int] size of the children array
     */
    public int childrenSize() { return children.size(); }

    /**
     * Return configuration of the Node
     * @return - [ArmConfig] configuration of the node, or null if it is not specified
     */
    public ArmConfig getConfiguration() { return configuration; }
}
